import{a as S}from"./chunk-EMZRNCIP.js";import{c as A}from"./chunk-DKHW3YWA.js";import{B as n,S as $,Z as _,ca as E,l as g,m as f,p as y,v}from"./chunk-NSU275EB.js";var D=(()=>{class m{http;baseUrl=S.apiUrl;constructor(e){this.http=e}handleError(e){let r="Something went wrong; please try again later.";return e.error?.message?r=e.error.message:e.message&&(r=e.message),f(()=>new Error(r))}getAcademicYears(){return this.http.get(`${this.baseUrl}/get-academic-years`).pipe(n(this.handleError))}setActiveYearAndSemester(e,r,t,s){return this.http.post(`${this.baseUrl}/set-active-ay-sem`,{academic_year_id:e,semester_id:r,start_date:t,end_date:s}).pipe(n(this.handleError))}deleteAcademicYear(e){return this.http.request("DELETE",`${this.baseUrl}/delete-ay`,{body:{academic_year_id:e}}).pipe(n(this.handleError))}addAcademicYear(e,r){return this.http.post(`${this.baseUrl}/add-academic-year`,{year_start:e,year_end:r}).pipe(n(t=>t.error&&t.error.message?f(()=>new Error(t.error.message)):f(()=>new Error("An unexpected error occurred."))))}getActiveYearAndSemester(){return this.http.get(`${this.baseUrl}/active-year-semester`).pipe(n(this.handleError))}fetchProgramDetailsByAcademicYear(e){return this.http.post(`${this.baseUrl}/fetch-ay-prog-details`,e).pipe(n(this.handleError))}updateYearLevelsCurricula(e,r,t){let s={academic_year_id:e,program_id:r,year_levels:t.map(i=>({year_level:i.year_level,curriculum_id:i.curriculum_id}))};return this.http.post(`${this.baseUrl}/update-yr-lvl-curricula`,s).pipe(n(this.handleError))}removeProgramFromAcademicYear(e,r){return this.http.request("DELETE",`${this.baseUrl}/remove-program`,{body:{academic_year_id:e,program_id:r}}).pipe(n(this.handleError))}updateSections(e,r,t,s){return this.http.post(`${this.baseUrl}/update-sections`,{academic_year_id:e,program_id:r,year_level:t,number_of_sections:s}).pipe(n(this.handleError))}getSections(e,r){return this.http.get(`${this.baseUrl}/programs/${e}/year/${r}/sections`).pipe(n(this.handleError))}getProgramsFromYearLevels(){return this.http.get(`${this.baseUrl}/active-year-levels-curricula`).pipe(n(this.handleError))}getActiveYearLevelsCurricula(){return this.http.get(`${this.baseUrl}/active-year-levels-curricula`).pipe(n(this.handleError))}getAssignedCoursesByProgramYearAndSection(e,r,t){return this.http.get(`${this.baseUrl}/get-assigned-courses-sem`,{params:{programId:e.toString(),yearLevel:r.toString(),sectionId:t.toString()}}).pipe(n(this.handleError))}populateSchedules(){return this.http.get(`${this.baseUrl}/populate-schedules`).pipe(n(this.handleError))}getAllRooms(){return this.http.get(`${this.baseUrl}/get-rooms`).pipe(n(this.handleError))}getFacultyDetails(){return this.http.get(`${this.baseUrl}/get-faculty`).pipe(n(this.handleError))}getSubmittedPreferencesForActiveSemester(){return this.http.get(`${this.baseUrl}/view-preferences`).pipe(n(this.handleError))}assignSchedule(e,r,t,s,i,l,c,a,h){return this.validateSchedule(e,r,t,s,i,l,c,a,h).pipe($(o=>{if(o.isValid){let u={schedule_id:e,faculty_id:r,room_id:t,day:s,start_time:i,end_time:l};return this.http.post(`${this.baseUrl}/assign-schedule`,u)}else return f(()=>new Error(o.message))}),n(this.handleError))}validateSchedule(e,r,t,s,i,l,c,a,h){return console.log("Received parameters:",{schedule_id:e,faculty_id:r,room_id:t,day:s,start_time:i,end_time:l,program_id:c,year_level:a,section_id:h}),v([this.populateSchedules(),this.getAllRooms(),this.getFacultyDetails()]).pipe($(([o,u,d])=>{let p=this.checkRoomAvailability(t,s,i,l,o,u,e),b=this.checkFacultyAvailability(r,s,i,l,o,e);return p.isValid?b.isValid?g({isValid:!0,message:"All validations passed"}):g(b):g(p)}))}validateFacultyAvailability(e,r,t,s,i,l,c,a){return v([this.populateSchedules(),this.getAllRooms(),this.getFacultyDetails()]).pipe(y(([h,o,u])=>this.checkFacultyAvailability(r,t,s,i,h,e)),n(this.handleError))}validateRoomAvailability(e,r,t,s,i,l,c,a){return v([this.populateSchedules(),this.getAllRooms(),this.getFacultyDetails()]).pipe(y(([h,o,u])=>this.checkRoomAvailability(r,t,s,i,h,o,e)),n(this.handleError))}validateProgramOverlap(e,r,t,s,i,l){return!r||!t||!s||!i||!l?g({isValid:!0,message:"Program overlap check skipped"}):this.populateSchedules().pipe(y(c=>{let a=this.findConflictingCourseInProgram(c,r,t,s,i,l,e);if(a){let{course:h,sectionName:o}=a,u=c.programs.find(p=>p.program_id===r);return{isValid:!1,message:`${u?u.program_code:"Unknown Program"} ${t}-${o} is already 
            scheduled for ${h.course_code} (${h.course_title}) on 
            ${s} from ${this.formatTimeForDisplay(h.schedule?.start_time||"")} to ${this.formatTimeForDisplay(h.schedule?.end_time||"")}.`}}else return{isValid:!0,message:"No program overlap detected"}}),n(this.handleError))}checkFacultyAvailability(e,r,t,s,i,l){if(!e||!r||!t||!s)return{isValid:!0,message:"Faculty availability check skipped"};let c=this.findConflictingSchedule(i,a=>a.faculty_id===e&&a.schedule?.day===r&&a.schedule.schedule_id!==l&&this.isTimeOverlap(t,s,a.schedule.start_time,a.schedule.end_time));if(c){let{course:a,programCode:h,yearLevel:o,sectionName:u}=c;return{isValid:!1,message:`${a.professor} is already assigned to ${a.course_code} (${a.course_title}) for ${h} ${o}-${u} on ${r} from ${this.formatTimeForDisplay(a.schedule?.start_time||"")} to ${this.formatTimeForDisplay(a.schedule?.end_time||"")}.`}}return{isValid:!0,message:"Faculty is available"}}checkRoomAvailability(e,r,t,s,i,l,c){if(!e||!r||!t||!s)return{isValid:!0,message:"Room availability check skipped"};let a=l.rooms.find(o=>o.room_id===e);if(!a)return{isValid:!1,message:"Invalid room selected"};let h=this.findConflictingSchedule(i,o=>(o.schedule?.room_id===e||o.room?.room_id===e)&&o.schedule?.day===r&&o.schedule.schedule_id!==c&&this.isTimeOverlap(t,s,o.schedule?.start_time,o.schedule?.end_time));if(h){let{course:o,programCode:u,yearLevel:d,sectionName:p}=h;return{isValid:!1,message:`Room ${a.room_code} is already booked for ${o.course_code} (${o.course_title}) in ${u} ${d}-${p} on ${r} from ${this.formatTimeForDisplay(o.schedule?.start_time||"")} to ${this.formatTimeForDisplay(o.schedule?.end_time||"")}.`}}return{isValid:!0,message:"Room is available"}}findConflictingCourseInProgram(e,r,t,s,i,l,c){for(let a of e.programs)if(a.program_id===r){for(let h of a.year_levels)if(h.year_level===t){for(let o of h.semesters)for(let u of o.sections)for(let d of u.courses)if(d.schedule?.day===s&&d.schedule?.schedule_id!==c&&this.isTimeOverlap(i,l,d.schedule?.start_time,d.schedule?.end_time))return{course:d,sectionName:u.section_name}}}}findConflictingSchedule(e,r){for(let t of e.programs)for(let s of t.year_levels)for(let i of s.semesters)for(let l of i.sections)for(let c of l.courses)if(r(c))return{course:c,programCode:t.program_code,yearLevel:s.year_level,sectionName:l.section_name}}formatTimeForDisplay(e){if(!e)return"";let[r,t,s]=e.split(":").map(Number),i=r>=12?"PM":"AM";return`${r%12||12}:${t.toString().padStart(2,"0")} ${i}`}timeToMinutes(e){let[r,t]=e.split(":").map(Number);return r*60+t}isTimeOverlap(e,r,t,s){if(!t||!s)return!1;let i=this.timeToMinutes(e),l=this.timeToMinutes(r),c=this.timeToMinutes(t),a=this.timeToMinutes(s);return console.log("Time overlap check:",{time1:`${e}-${r}`,time2:`${t}-${s}`,start1Minutes:i,end1Minutes:l,start2Minutes:c,end2Minutes:a}),i<a&&l>c}static \u0275fac=function(r){return new(r||m)(E(A))};static \u0275prov=_({token:m,factory:m.\u0275fac,providedIn:"root"})}return m})();export{D as a};
